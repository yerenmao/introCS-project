class ListManager {
    field Trap traphead;
    field Trap traptail;
    field Enemy enemyhead;
    field Enemy enemytail;
    field Bullet bullethead;
    field Bullet bullettail;
    field EnemyBullet ebhead;
    field EnemyBullet ebtail;
    field Enemy2 enemy2head;
    field Enemy2 enemy2tail;
    field EnemyBullet2 eb2head;
    field EnemyBullet2 eb2tail;
    field int ticker;

    constructor ListManager new() {
        let traphead = null; let traptail = null;
        let enemyhead = null; let enemytail = null;
        let bullethead = null; let bullettail = null;
        let ebhead = null; let ebtail = null;
        let enemy2head = null; let enemy2tail = null;
        let eb2head = null; let eb2tail = null;
        let ticker = 0;
        return this;
    }

    method void tick() {
        do tickenemy();
        do tickenemybullet();
        do tickenemy2();
        do tickenemybullet2();
        do tickbullet();
        if(ticker = 30) {
            do ticktrap();
            let ticker = 0;
        } else {let ticker = ticker + 1;}
        return;
    }

    method void clearall() {
        while(~(traphead = null)) {         // trap
            do removetrap(traphead);
        }
        while(~(enemyhead = null)) {        // enemy
            do removeenemy(enemyhead);
        }
        while(~(bullethead = null)) {       // bullet
            do removebullet(bullethead);
        }
        while(~(ebhead = null)) {           // enemy bullet
            do removeenemybullet(ebhead);
        }
        while(~(enemy2head = null)) {       // enemy2
            do removeenemy2(enemy2head);
        }
        while(~(eb2head = null)) {          // enemy2 bullet
            do removeenemybullet2(eb2head);
        }
        return;
    }

    method boolean allcleared() {
        if((traphead = null) & (enemyhead = null) & (bullethead = null) & (ebhead = null) & (enemy2head = null) & (eb2head = null)) {
            return true;
        }
        return false;
    }

    method boolean enemybulletempty() {
        if(ebhead = null) {return true;}
        return false;
    }

    method boolean enemybullet2empty() {
        if(eb2head = null) {return true;}
        return false;
    }

    /* Trap */

    method void inserttrap(Trap t) {
        if((traphead = null) | (traptail = null)) {
            let traphead = t; let traptail = t;
        } else {
            do traptail.setnext(t); do t.setprev(traptail);
            let traptail = t;
        }
        return;
    }

    method void removetrap(Trap t) {
        var boolean done;
        var Trap ptr, prev, next;
        let done = false;
        let ptr = traphead;
        while((~(ptr = null)) & (~done)) {
            if(ptr = t) {
                if((ptr = traphead) & (ptr = traptail)) {
                    let traphead = null; let traptail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = traphead) {let traphead = next;}
                    if(ptr = traptail) {let traptail = prev;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method boolean hittrap(int bx, int by, int bs) {
        var Trap ptr;
        let ptr = traphead;
        while(~(ptr = null)) {
            if(ptr.hitted(bx, by, bs)) {
                do removetrap(ptr);
                do ptr.free();
                return true;
            }
            let ptr = ptr.getnext();
        }
        return false;
    }

    method void ticktrap() {
        var Trap ptr;
        let ptr = traphead;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }

    /* Enemy */

    method void insertenemy(Enemy e) {
        if((enemyhead = null) | (enemytail = null)) {
            let enemyhead = e; let enemytail = e;
        } else {
            do enemytail.setnext(e); do e.setprev(enemytail);
            let enemytail = e;
        }
        return;
    }

    method void removeenemy(Enemy e) {
        var boolean done;
        var Enemy ptr, prev, next;
        let done = false;
        let ptr = enemyhead;
        while((~(ptr = null)) & (~done)) {
            if(ptr = e) {
                if((ptr = enemyhead) & (ptr = enemytail)) {
                    let enemyhead = null; let enemytail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = enemyhead) {let enemyhead = next;}
                    if(ptr = enemytail) {let enemytail = prev;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method boolean hitenemy(int bx, int by, int bs) {
        var Enemy ptr;
        let ptr = enemyhead;
        while(~(ptr = null)) {
            if(ptr.hitted(bx, by, bs)) {
                return true;
            }
            let ptr = ptr.getnext();
        }
        return false;
    }

    method void tickenemy() {
        var Enemy ptr;
        let ptr = enemyhead;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }

    /* Bullet */

    method void insertbullet(Bullet b) {
        if((bullethead = null) | (bullettail = null)) {
            let bullethead = b; let bullettail = b;
        } else {
            do bullettail.setnext(b); do b.setprev(bullettail);
            let bullettail = b;
        }
        return;
    }

    method void removebullet(Bullet b) {
        var boolean done;
        var Bullet ptr, prev, next;
        let done = false;
        let ptr = bullethead;
        while(~(ptr = null) & (~done)) {
            if(ptr = b) {
                if((ptr = bullethead) & (ptr = bullettail)) {
                    let bullethead = null; let bullettail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = bullethead) {let bullethead = next;}
                    if(ptr = bullettail) {let bullettail = prev;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method void tickbullet() {
        var Bullet ptr;
        let ptr = bullethead;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }

    /* EnemyBullet */

    method void insertenemybullet(EnemyBullet eb) {
        if((ebhead = null) | (ebtail = null)) {
            let ebhead = eb; let ebtail = eb;
        } else {
            do ebtail.setnext(eb); do eb.setprev(ebtail);
            let ebtail = eb;
        }
        return;
    }

    method void removeenemybullet(EnemyBullet eb) {
        var boolean done;
        var EnemyBullet ptr, prev, next;
        let done = false;
        let ptr = ebhead;
        while((~(ptr = null)) & (~done)) {
            if(ptr = eb) {
                if((ptr = ebhead) & (ptr = ebtail)) {
                    let ebhead = null; let ebtail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = ebhead) {let ebhead = next;}
                    if(ptr = ebtail) {let ebtail = next;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method boolean hitenemybullet(int bx, int by, int bs) {
        var EnemyBullet ptr;
        let ptr = ebhead;
        while(~(ptr = null)) {
            if(ptr.hitted(bx, by, bs)) {
                do removeenemybullet(ptr);
                do ptr.free();
                return true;
            }
            let ptr = ptr.getnext();
        }
        return false;
    }

    method void tickenemybullet() {
        var EnemyBullet ptr;
        let ptr = ebhead;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }

    /* Enemy2 */

    method void insertenemy2(Enemy2 e) {
        if((enemy2head = null) | (enemy2tail = null)) {
            let enemy2head = e; let enemy2tail = e;
        } else {
            do enemy2tail.setnext(e); do e.setprev(enemy2tail);
            let enemy2tail = e;
        }
        return;
    }

    method void removeenemy2(Enemy2 e) {
        var boolean done;
        var Enemy2 ptr, prev, next;
        let done = false;
        let ptr = enemy2head;
        while((~(ptr = null)) & (~done)) {
            if(ptr = e) {
                if((ptr = enemy2head) & (ptr = enemy2tail)) {
                    let enemy2head = null; let enemy2tail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = enemy2head) {let enemy2head = next;}
                    if(ptr = enemy2tail) {let enemy2tail = prev;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method boolean hitenemy2(int bx, int by, int bs) {
        var Enemy2 ptr;
        let ptr = enemy2head;
        while(~(ptr = null)) {
            if(ptr.hitted(bx, by, bs)) {
                return true;
            }
            let ptr = ptr.getnext();
        }
        return false;
    }

    method void tickenemy2() {
        var Enemy2 ptr;
        let ptr = enemy2head;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }

    /* EnemyBullet2 */

    method void insertenemybullet2(EnemyBullet2 eb2) {
        if((eb2head = null) | (eb2tail = null)) {
            let eb2head = eb2; let eb2tail = eb2;
        } else {
            do eb2tail.setnext(eb2); do eb2.setprev(eb2tail);
            let eb2tail = eb2;
        }
        return;
    }

    method void removeenemybullet2(EnemyBullet2 eb2) {
        var boolean done;
        var EnemyBullet2 ptr, prev, next;
        let done = false;
        let ptr = eb2head;
        while((~(ptr = null)) & (~done)) {
            if(ptr = eb2) {
                if((ptr = eb2head) & (ptr = eb2tail)) {
                    let eb2head = null; let eb2tail = null;
                } else {
                    let prev = ptr.getprev();
                    let next = ptr.getnext();
                    if(~(prev = null)) {do prev.setnext(next);}
                    if(~(next = null)) {do next.setprev(prev);}
                    if(ptr = eb2head) {let eb2head = next;}
                    if(ptr = eb2tail) {let eb2tail = next;}
                }
                let done = true;
            }
            if(~done) {let ptr = ptr.getnext();}
        }
        return;
    }

    method boolean hitenemybullet2(int bx, int by, int bs) {
        var EnemyBullet2 ptr;
        let ptr = eb2head;
        while(~(ptr = null)) {
            if(ptr.hitted(bx, by, bs)) {
                do removeenemybullet2(ptr);
                do ptr.free();
                return true;
            }
            let ptr = ptr.getnext();
        }
        return false;
    }

    method void tickenemybullet2() {
        var EnemyBullet2 ptr;
        let ptr = eb2head;
        while(~(ptr = null)) {
            do ptr.tick();
            let ptr = ptr.getnext();
        }
        return;
    }
}